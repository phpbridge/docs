goals do
	goal "Create a way for users to add their own topics to the database"

	message "Now we are adding some interactivity to our site!"
end

steps do
	step do
		message "Create a new file, called `add.php` in the `public` directory"

		message "Then we will add an HTML form:"

		source_code :html, <<-HTML
			<h2>New Topic</h2>
			<form action="add.php" method="POST">
				<label>
					Title: <input type="text" name="title">
				</label>
				<br>
				<label>
					Description:
					<br>
					<textarea name="description" cols="50" rows="20"></textarea>
				</label>
				<br>
				<input type="submit" value="Add Topic">
			</form>
		HTML

		message "You can browse to this file at <http://localhost:8080/add.php>"

		message 'When you click on "Add Topic", the form will be submitted back to the server'

		message 'Adding the following will let you see what was sent'

		source_code :php, <<-PHP
			<?php
			var_dump($_POST);
		PHP

		tip "We are using a `POST` action in our `<form>`, therefore the data will be available in the `$_POST` super global."
	end

	step do
		message "Now that we have our data, we can go ahead and save it in our database."

		message "Add the following the top of `add.php`:"

		source_code :php, <<-PHP
			<?php
			require 'TopicData.php';

			if (isset($_POST) && sizeof($_POST) > 0) {
				$data = new TopicData();
				$data->add($_POST);
			}
		PHP

		message "Submitting the form in your browser will now show this:"

		fuzzy_result "Fatal error: Call to undefined method TopicData::add() in /var/www/suggestotron/public/add.php on line 6"

		message "Don't worry! This is because we haven't added a `TopicData->add()` method yet. We will do that next!"
	end

	step do
		message "Going back to our `TopicData` class, add the `add` method:"

		important "For security, we are using a prepared query to ensure our data is escaped securely before sending it to our database"

		source_code :php, <<-PHP
			public function add($data)
			{
				$query = $this->connection->prepare(
					"INSERT INTO topics (
						title,
						description
					) VALUES (
						:title,
						:description
					)"
				);

				$data = [
					':title' => $data['title'],
					':description' => $data['description']
				];

				$query->execute($data);
			}
		PHP

		tip "Notice how we're using the same `INSERT` SQL code from earlier"
	end

	step do
		message "If you submit your form now, you will see another error:"

		fuzzy_result "Fatal error: Call to a member function prepare() on a non-object in /var/www/suggestotron/public/TopicData.php on line 20"

		message "This is because we **forgot** to call `TopicData->connect()`. Wouldn't it be nice if we didn't even *have* to remember this?"

		message "We can do this by using a special method called `__construct`. This is known as the constructor and is *automatically called* whenever we create a `new` instance of the class."

		source_code :php, <<-PHP
			public function __construct()
			{
				$this->connect();
			}
		PHP

		message "Now, whenever we call `new TopicData()` it will automatically connect to the database"
	end

	step do
		message "**Now** when you submit your form, it will save the topic, yay! You can verify this by looking at `index.php`, <http://localhost:8080>"
	end

	step do
		message "We can automatically forward our users to the list by using the `header()` method with a `Location: /url` argument."

		message "Add the following after the call to `$data->add($_POST)`:"

		source_code :php, <<-PHP
			header("Location: /");
			exit;
		PHP

		message "Once we send the header, we must be sure to `exit;` so no other code is run."
	end
end

explanation do
	message "Our users can now add their own topics, no SQL knowledge required!"

	message "We taking the users input from an HTML form, `$_POST`, and using `INSERT` to add it to our database."
end

next_step "editing_topics"